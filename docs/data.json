{
    "project": {
        "name": "Fogger",
        "description": "CSCI 3130 Fogger Application Group 3",
        "version": "0.1.0"
    },
    "files": {
        "static/js/dd_belatedpng.js": {
            "name": "static/js/dd_belatedpng.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/distance.js": {
            "name": "static/js/distance.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/graphics.js": {
            "name": "static/js/graphics.js",
            "modules": {
                "graphics": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/map.js": {
            "name": "static/js/map.js",
            "modules": {},
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/js/navigator.js": {
            "name": "static/js/navigator.js",
            "modules": {
                "fogger": 1
            },
            "classes": {
                "navigator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/js/share.js": {
            "name": "static/js/share.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        ".grunt/grunt-contrib-jasmine/boot.js": {
            "name": ".grunt/grunt-contrib-jasmine/boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/lib/jasmine-2.0.0/boot.js": {
            "name": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/spec/default/mapSpec.js": {
            "name": "static/jasmine/spec/default/mapSpec.js",
            "modules": {
                "test": 1
            },
            "classes": {
                "MapSpec": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/spec/default/userSpec.js": {
            "name": "static/jasmine/spec/default/userSpec.js",
            "modules": {},
            "classes": {
                "UserSpec": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Gruntfile.js": {
            "name": "Gruntfile.js",
            "modules": {
                "Grunt": 1
            },
            "classes": {
                "GruntConfiguration": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "graphics": {
            "name": "graphics",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/js/graphics.js",
            "line": 1,
            "description": "Fogger Graphics Module"
        },
        "fogger": {
            "name": "fogger",
            "submodules": {},
            "classes": {
                "map": 1,
                "navigator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/js/navigator.js",
            "line": 1,
            "description": "Provides navigator functionality and simulates\nuser movement.",
            "itemtype": "main"
        },
        "test": {
            "name": "test",
            "submodules": {},
            "classes": {
                "MapSpec": 1,
                "UserSpec": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/jasmine/spec/default/userSpec.js",
            "line": 6,
            "itemtype": "main"
        },
        "Grunt": {
            "name": "Grunt",
            "submodules": {},
            "classes": {
                "GruntConfiguration": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Gruntfile.js",
            "line": 16,
            "description": "This Gruntfile specifies commands for our fogger project.\n\nRunning jasmine tests\n---------------------\nCurrent the jasmine test command is not working because\nour application runs on web2py. This would require a complex\nheadless environment that we might implement for the next iteration.\nFor now, tests can be run by navigating to a page and adding \"test=1\"\nas a GET URL parameter."
        }
    },
    "classes": {
        "map": {
            "name": "map",
            "shortname": "map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fogger",
            "namespace": "",
            "file": "static/js/map.js",
            "line": 1,
            "description": "Provides the google map layout that show the user location."
        },
        "navigator": {
            "name": "navigator",
            "shortname": "navigator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fogger",
            "namespace": "",
            "file": "static/js/navigator.js",
            "line": 1,
            "description": "Provides navigator functionality and simulates\nuser movement."
        },
        "MapSpec": {
            "name": "MapSpec",
            "shortname": "MapSpec",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 1
        },
        "UserSpec": {
            "name": "UserSpec",
            "shortname": "UserSpec",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "static/jasmine/spec/default/userSpec.js",
            "line": 6
        },
        "GruntConfiguration": {
            "name": "GruntConfiguration",
            "shortname": "GruntConfiguration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Grunt",
            "namespace": "",
            "file": "Gruntfile.js",
            "line": 16
        }
    },
    "classitems": [
        {
            "file": "static/js/dd_belatedpng.js",
            "line": 1,
            "description": "DD_belatedPNG: Adds IE6 support: PNG images for CSS background-image and HTML <IMG/>.\nAuthor: Drew Diller\nEmail: drew.diller@gmail.com\nURL: http://www.dillerdesign.com/experiment/DD_belatedPNG/\nVersion: 0.0.8a\nLicensed under the MIT License: http://dillerdesign.com/experiment/DD_belatedPNG/#license\n\nExample usage:\nDD_belatedPNG.fix('.png_bg'); // argument is a CSS selector\nDD_belatedPNG.fixPng( someNode ); // argument is an HTMLDomElement",
            "class": "map"
        },
        {
            "file": "static/js/distance.js",
            "line": 17,
            "class": "map"
        },
        {
            "file": "static/js/graphics.js",
            "line": 8,
            "access": "private",
            "tagname": "mask",
            "type": "{d3.selection}",
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 14,
            "description": "Circle Radius",
            "access": "private",
            "tagname": "radius",
            "type": "{Integer}",
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 20,
            "access": "private",
            "tagname": "height",
            "type": "{Float}",
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 25,
            "access": "private",
            "tagname": "width",
            "type": "{Float}",
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 31,
            "description": "Sets the circles in the mask\ndata = { content = [loc1, loc2 .. ], errors = [] }\nloc = { \"loc\": {\"lat\": lat, \"lng\": lng}, \"uid\": uid }",
            "itemtype": "method",
            "name": "setMask",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "RESTful Api Object"
                },
                {
                    "name": "o",
                    "description": "",
                    "type": "Coord"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 42,
            "description": "Move from the geographic point of reference\nto the x, y grid point of reference.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "lat,",
                    "description": "{Float} lng } } loc",
                    "type": "Point =  Float"
                },
                {
                    "name": "lat,",
                    "description": "{Float} lng } } nw",
                    "type": "Point =  Float"
                },
                {
                    "name": "width,",
                    "description": "{Float} height } } mapBound",
                    "type": "Frame =  Float"
                },
                {
                    "name": "width,",
                    "description": "{Float} height } } svgFrame",
                    "type": "Frame =  Float"
                }
            ],
            "return": {
                "description": "x, {Float} y } }",
                "type": "Point =  Float"
            },
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 88,
            "description": "Removes the",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "map",
            "module": "graphics"
        },
        {
            "file": "static/js/map.js",
            "line": 19,
            "access": "private",
            "tagname": "map",
            "type": "{google.maps.Map}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 25,
            "description": "Object that is returned by\nnavigator.geolocation.getCurrentPosition()",
            "access": "private",
            "tagname": "userLocation",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 32,
            "access": "private",
            "tagname": "userMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 38,
            "description": "Gets the map.",
            "itemtype": "method",
            "name": "getMap",
            "return": {
                "description": "map",
                "type": "google.maps.Map"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 47,
            "description": "Gets user location.",
            "itemtype": "method",
            "name": "getUserLocation",
            "return": {
                "description": "userLocation",
                "type": "google.maps.LatLng"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 56,
            "description": "Gets user marker.",
            "itemtype": "method",
            "name": "getUserMarker",
            "return": {
                "description": "userMarker",
                "type": "google.maps.Marker"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 65,
            "description": "Sets the map.",
            "itemtype": "method",
            "name": "setMap",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "google.maps.Map"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 74,
            "description": "Sets the user location.",
            "itemtype": "method",
            "name": "setUserLocation",
            "params": [
                {
                    "name": "u",
                    "description": "",
                    "type": "google.maps.LatLng"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 83,
            "description": "GET locations from database within the map's bounds.",
            "params": [
                {
                    "name": "uid",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "success",
                    "description": "",
                    "type": "Callback"
                },
                {
                    "name": "fail",
                    "description": "",
                    "type": "Callback"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 95,
            "description": "POST given location to the RESTful api.\nData must have the following form:\n  { loc: { lat: lat, lng: lng }, uid: uid }",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Location"
                },
                {
                    "name": "success",
                    "description": "",
                    "type": "Callback"
                },
                {
                    "name": "fail",
                    "description": "",
                    "type": "Callback"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 109,
            "description": "Sets the user marker.",
            "itemtype": "method",
            "name": "setUserMarker",
            "params": [
                {
                    "name": "u",
                    "description": "",
                    "type": "google.maps.Marker"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 118,
            "description": "Conventing the google object to latitude and longitude.",
            "itemtype": "method",
            "name": "setUserMarker",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Position"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 128,
            "description": "Gets the user location.",
            "itemtype": "method",
            "name": "getLocation",
            "params": [
                {
                    "name": "pass",
                    "description": "",
                    "type": "google.maps.LatLng"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 146,
            "description": "Gets the bound object from the map.",
            "return": {
                "description": "",
                "type": "google.maps.LatLngBounds"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 154,
            "description": "Pans the map to the user current location.",
            "itemtype": "method",
            "name": "panToUserLoc",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 166,
            "description": "Moves the user marker on the map.",
            "itemtype": "method",
            "name": "moveUserMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 179,
            "description": "Updates the user location.",
            "itemtype": "method",
            "name": "updateLocation",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Position"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 219,
            "description": "Sets events for the map module.",
            "itemtype": "method",
            "name": "setEvents",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 229,
            "description": "Add map event.",
            "itemtype": "method",
            "name": "addEvent()",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 237,
            "description": "Sets the width and height of the map.",
            "itemtype": "method",
            "name": "reDim",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 246,
            "description": "Places the user marker on the map.",
            "itemtype": "method",
            "name": "placeUserMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 262,
            "description": "Initializes the map",
            "itemtype": "method",
            "name": "initializeMap",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 281,
            "description": "Initializes the map module.",
            "itemtype": "method",
            "name": "init",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 294,
            "description": "Sets the glopal name space",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 15,
            "description": "Object that is returned by \nnavigator.geolocation.getCurrentPosition()",
            "access": "private",
            "tagname": "position",
            "type": "Geolocation",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 31,
            "description": "Gets position.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "position"
            },
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 40,
            "description": "Sets position.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Geolocation"
                }
            ],
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 49,
            "description": "Takes a Geolocation object and parses\nit to update position.",
            "itemtype": "method",
            "name": "setCurrentPosition",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Geolocation"
                }
            ],
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 111,
            "description": "Sets initial position to the user's\nactual position.",
            "itemtype": "method",
            "name": "init",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 135,
            "description": "Indicates wether the module uses mock coords.",
            "itemtype": "property",
            "name": "mock",
            "type": "boolean",
            "default": "true",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/share.js",
            "line": 1,
            "description": "Created and copyrighted by Massimo Di Pierro <massimo.dipierro@gmail.com>\n   (MIT license)  \nExample:\n<script src=\"share.js\"></script>",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 8,
            "description": "Resfult API Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 28,
            "description": "Graphics Module Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "Gruntfile.js",
            "line": 21,
            "description": "Reads the package.json file.",
            "itemtype": "property",
            "name": "pkg",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 27,
            "description": "Generates documentation for javascript source code,\ntest code and grunt file",
            "itemtype": "property",
            "name": "yuidoc",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 44,
            "description": "Attempts to run jasmine tests, but requires a headless\nenvironment.",
            "itemtype": "property",
            "name": "jasmine",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 59,
            "description": "Removes the docs folder and everything else generate by\nthis Gruntfile.",
            "itemtype": "property",
            "name": "clean",
            "class": "GruntConfiguration",
            "module": "Grunt"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nDD_belatedPNG: Adds IE6 support: PNG images for CSS background-image and HTML <IMG/>.\nAuthor: Drew Diller\nEmail: drew.diller@gmail.com\nURL: http://www.dillerdesign.com/experiment/DD_belatedPNG/\nVersion: 0.0.8a\nLicensed under the MIT License: http://dillerdesign.com/experiment/DD_belatedPNG/#license\n\nExample usage:\nDD_belatedPNG.fix('.png_bg'); // argument is a CSS selector\nDD_belatedPNG.fixPng( someNode ); // argument is an HTMLDomElement",
            "line": " static/js/dd_belatedpng.js:1"
        },
        {
            "message": "Missing item type",
            "line": " static/js/distance.js:17"
        },
        {
            "message": "Missing item type",
            "line": " static/js/graphics.js:8"
        },
        {
            "message": "Missing item type\nCircle Radius",
            "line": " static/js/graphics.js:14"
        },
        {
            "message": "Missing item type",
            "line": " static/js/graphics.js:20"
        },
        {
            "message": "Missing item type",
            "line": " static/js/graphics.js:25"
        },
        {
            "message": "Missing item type\nRemoves the",
            "line": " static/js/graphics.js:88"
        },
        {
            "message": "Missing item type",
            "line": " static/js/map.js:19"
        },
        {
            "message": "Missing item type\nObject that is returned by\nnavigator.geolocation.getCurrentPosition()",
            "line": " static/js/map.js:25"
        },
        {
            "message": "Missing item type",
            "line": " static/js/map.js:32"
        },
        {
            "message": "Missing item type\nGET locations from database within the map's bounds.",
            "line": " static/js/map.js:83"
        },
        {
            "message": "Missing item type\nPOST given location to the RESTful api.\nData must have the following form:\n  { loc: { lat: lat, lng: lng }, uid: uid }",
            "line": " static/js/map.js:95"
        },
        {
            "message": "Missing item type\nGets the bound object from the map.",
            "line": " static/js/map.js:146"
        },
        {
            "message": "Missing item type\nSets the glopal name space",
            "line": " static/js/map.js:294"
        },
        {
            "message": "Missing item type\nObject that is returned by \nnavigator.geolocation.getCurrentPosition()",
            "line": " static/js/navigator.js:15"
        },
        {
            "message": "Missing item type\nCreated and copyrighted by Massimo Di Pierro <massimo.dipierro@gmail.com>\n   (MIT license)  \nExample:\n<script src=\"share.js\"></script>",
            "line": " static/js/share.js:1"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:173"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:173"
        },
        {
            "message": "Missing item type\nResfult API Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:8"
        },
        {
            "message": "Missing item type\nGraphics Module Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:28"
        }
    ]
}