{
    "project": {
        "name": "Fogger",
        "description": "CSCI 3130 Fogger Application Group 3",
        "version": "0.1.0"
    },
    "files": {
        "static/js/dd_belatedpng.js": {
            "name": "static/js/dd_belatedpng.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/distance.js": {
            "name": "static/js/distance.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/graphics.js": {
            "name": "static/js/graphics.js",
            "modules": {
                "graphics": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/js/interact.js": {
            "name": "static/js/interact.js",
            "modules": {},
            "classes": {
                "interact": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/js/map.js": {
            "name": "static/js/map.js",
            "modules": {},
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/js/navigator.js": {
            "name": "static/js/navigator.js",
            "modules": {
                "fogger": 1
            },
            "classes": {
                "navigator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/js/share.js": {
            "name": "static/js/share.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        ".grunt/grunt-contrib-jasmine/boot.js": {
            "name": ".grunt/grunt-contrib-jasmine/boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/lib/jasmine-2.0.0/boot.js": {
            "name": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/spec/default/mapSpec.js": {
            "name": "static/jasmine/spec/default/mapSpec.js",
            "modules": {
                "test": 1
            },
            "classes": {
                "MapSpec": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "static/jasmine/spec/default/userSpec.js": {
            "name": "static/jasmine/spec/default/userSpec.js",
            "modules": {},
            "classes": {
                "UserSpec": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Gruntfile.js": {
            "name": "Gruntfile.js",
            "modules": {
                "Grunt": 1
            },
            "classes": {
                "GruntConfiguration": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "graphics": {
            "name": "graphics",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/js/graphics.js",
            "line": 1,
            "description": "Fogger Graphics Module"
        },
        "fogger": {
            "name": "fogger",
            "submodules": {},
            "classes": {
                "interact": 1,
                "map": 1,
                "navigator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/js/navigator.js",
            "line": 1,
            "description": "Provides navigator functionality and simulates\nuser movement.",
            "itemtype": "main"
        },
        "test": {
            "name": "test",
            "submodules": {},
            "classes": {
                "MapSpec": 1,
                "UserSpec": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "static/jasmine/spec/default/userSpec.js",
            "line": 6,
            "itemtype": "main"
        },
        "Grunt": {
            "name": "Grunt",
            "submodules": {},
            "classes": {
                "GruntConfiguration": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Gruntfile.js",
            "line": 16,
            "description": "This Gruntfile specifies commands for our fogger project.\n\nRunning jasmine tests\n---------------------\nCurrent the jasmine test command is not working because\nour application runs on web2py. This would require a complex\nheadless environment that we might implement for the next iteration.\nFor now, tests can be run by navigating to a page and adding \"test=1\"\nas a GET URL parameter."
        }
    },
    "classes": {
        "interact": {
            "name": "interact",
            "shortname": "interact",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fogger",
            "namespace": "",
            "file": "static/js/interact.js",
            "line": 1,
            "description": "Provides the map with an interaction layer"
        },
        "map": {
            "name": "map",
            "shortname": "map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fogger",
            "namespace": "",
            "file": "static/js/map.js",
            "line": 1,
            "description": "Provides the google map layout that show the user location."
        },
        "navigator": {
            "name": "navigator",
            "shortname": "navigator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fogger",
            "namespace": "",
            "file": "static/js/navigator.js",
            "line": 1,
            "description": "Provides navigator functionality and simulates\nuser movement."
        },
        "MapSpec": {
            "name": "MapSpec",
            "shortname": "MapSpec",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 1
        },
        "UserSpec": {
            "name": "UserSpec",
            "shortname": "UserSpec",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "static/jasmine/spec/default/userSpec.js",
            "line": 6
        },
        "GruntConfiguration": {
            "name": "GruntConfiguration",
            "shortname": "GruntConfiguration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Grunt",
            "namespace": "",
            "file": "Gruntfile.js",
            "line": 16
        }
    },
    "classitems": [
        {
            "file": "static/js/dd_belatedpng.js",
            "line": 1,
            "description": "DD_belatedPNG: Adds IE6 support: PNG images for CSS background-image and HTML <IMG/>.\nAuthor: Drew Diller\nEmail: drew.diller@gmail.com\nURL: http://www.dillerdesign.com/experiment/DD_belatedPNG/\nVersion: 0.0.8a\nLicensed under the MIT License: http://dillerdesign.com/experiment/DD_belatedPNG/#license\n\nExample usage:\nDD_belatedPNG.fix('.png_bg'); // argument is a CSS selector\nDD_belatedPNG.fixPng( someNode ); // argument is an HTMLDomElement",
            "class": "interact"
        },
        {
            "file": "static/js/distance.js",
            "line": 17,
            "class": "interact"
        },
        {
            "file": "static/js/graphics.js",
            "line": 7,
            "description": "Mask Canvas",
            "access": "private",
            "tagname": "mask",
            "type": "{d3.selection}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 13,
            "description": "Canvas context",
            "type": "{Object}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 18,
            "description": "Circle Radius",
            "access": "private",
            "tagname": "radius",
            "type": "{Integer}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 24,
            "description": "Relative Radius Size",
            "type": "{Number}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 29,
            "description": "Canvas height",
            "access": "private",
            "tagname": "height",
            "type": "{Float}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 35,
            "description": "Canvas width",
            "access": "private",
            "tagname": "width",
            "type": "{Float}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 42,
            "description": "Get the context of the canvas.",
            "return": {
                "description": "Canvas context",
                "type": "Object"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 50,
            "description": "Gets the scale factor of the map, \nthis basically corresponds to the\nwidth of the canvas, in meters.",
            "params": [
                {
                    "name": "geo",
                    "description": "GeoBounds of the map",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "scale factor",
                "type": "Float"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 61,
            "description": "Move from the geographic point of reference\nto the x, y pixel grid point of reference.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "lat,",
                    "description": "{Float} lng } } loc",
                    "type": "Point =  Float"
                },
                {
                    "name": "geo",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "x, {Float} y } }    2D Point",
                "type": "Point =  Float"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 81,
            "description": "Get the bounds of map in delta geolocation format.",
            "params": [
                {
                    "name": "geo",
                    "description": "geoBounds Object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "height, {Float} width } }",
                "type": "MapBound =  Float"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 93,
            "description": "Get the canvas frame in width/height format.",
            "return": {
                "description": "height, {Float} width } }",
                "type": "CanvasFrame =  Float"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 104,
            "description": "Sets the circles in the mask\ndata = { content = [loc1, loc2 .. ], errors = [] }\nloc = { \"loc\": {\"lat\": lat, \"lng\": lng}, \"uid\": uid }",
            "itemtype": "method",
            "name": "setMask",
            "params": [
                {
                    "name": "d",
                    "description": "",
                    "type": "RESTful Api Object"
                },
                {
                    "name": "o",
                    "description": "",
                    "type": "Coord"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 161,
            "description": "Add circles to the canvas for a location on the map.",
            "params": [
                {
                    "name": "lat,",
                    "description": "{Float} lng } ] } locs Array of Point Objects",
                    "type": "[ Point =  Float"
                },
                {
                    "name": "geo",
                    "description": "geoBounds Object for scaling",
                    "type": "Object"
                }
            ],
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 176,
            "description": "Add a canvas to the HTML layout.",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id attribute to assign the page canvas element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "D3 selector",
                "type": "Object"
            },
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 189,
            "description": "Resets the canvas mask.",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 196,
            "description": "Initializes the module",
            "params": [
                {
                    "name": "success",
                    "description": "Called after the module is loaded",
                    "type": "Callback"
                }
            ],
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/graphics.js",
            "line": 219,
            "description": "Module global namespace",
            "type": "{Global}",
            "class": "interact",
            "module": "graphics"
        },
        {
            "file": "static/js/interact.js",
            "line": 23,
            "description": "Width of the interaction layer",
            "type": "{Number}",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 28,
            "description": "Height of the interaction layer",
            "type": "{Number}",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 33,
            "description": "Reference to the layer.",
            "type": "{Object}",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 40,
            "description": "Generates a Map Marker.",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 61,
            "description": "Generates the user's marker",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 79,
            "description": "Generates a button to center the map to the user location\n  and to turn on following.",
            "itemtype": "method",
            "name": "generateGoToButton",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 99,
            "description": "Generates a toggle button.",
            "itemtype": "method",
            "name": "generateToggle",
            "params": [
                {
                    "name": "id",
                    "description": "HTML id attribute",
                    "type": "String"
                },
                {
                    "name": "ops",
                    "description": "toggle operations",
                    "type": "Array"
                },
                {
                    "name": "x",
                    "description": "x pos rel to right",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y pos rel to top",
                    "type": "Number"
                }
            ],
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 126,
            "description": "Generates a button to toggle between terrain types.",
            "itemtype": "method",
            "name": "generateTerrainToggle",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 141,
            "description": "Generates a button to toggle between map views.",
            "itemtype": "method",
            "name": "generateViewToggle",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 156,
            "description": "Generates the interface element",
            "itemtype": "method",
            "name": "generateInterface",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 178,
            "description": "Sets the events of the interaction layer",
            "itemtype": "method",
            "name": "setEvents",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 209,
            "description": "Initializes the map module.",
            "itemtype": "method",
            "name": "init",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/interact.js",
            "line": 221,
            "description": "Sets the glopal name space",
            "type": "{Attribute} fogger.interact",
            "class": "interact",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 20,
            "access": "private",
            "tagname": "map",
            "type": "{google.maps.Map}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 26,
            "description": "Object that is returned by\nnavigator.geolocation.getCurrentPosition()",
            "access": "private",
            "tagname": "userLocation",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 33,
            "access": "private",
            "tagname": "userMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 37,
            "description": "Array of user locations.",
            "type": "{Array}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 42,
            "description": "Array of other users' locations.",
            "type": "{Array}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 47,
            "description": "Timeout to delay map reload.",
            "type": "{Integer}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 52,
            "description": "Map viewing mode (user or world).",
            "type": "{String}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 57,
            "description": "Map viewing type (satellite or roadmap)",
            "type": "{google.maps.MapTypeId}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 62,
            "description": "Set the map to follow the user.",
            "type": "{Boolean}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 68,
            "description": "Gets the map.",
            "itemtype": "method",
            "name": "getMap",
            "return": {
                "description": "map",
                "type": "google.maps.Map"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 77,
            "description": "Gets user location.",
            "itemtype": "method",
            "name": "getUserLocation",
            "return": {
                "description": "userLocation",
                "type": "google.maps.LatLng"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 86,
            "description": "Gets user marker.",
            "itemtype": "method",
            "name": "getUserMarker",
            "return": {
                "description": "userMarker",
                "type": "google.maps.Marker"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 95,
            "description": "Gets the view.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "User or world view.",
                "type": "String"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 104,
            "description": "Sets the view",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "v",
                    "description": "Specify \"user\" or \"world\" view",
                    "type": "String"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 117,
            "description": "Get the mapType",
            "itemtype": "method",
            "name": "getMapType",
            "return": {
                "description": "",
                "type": "google.maps.MapTypeId"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 126,
            "description": "Sets the mapType.",
            "itemtype": "method",
            "name": "setMapType",
            "params": [
                {
                    "name": "mt",
                    "description": "",
                    "type": "google.maps.MapTypeId"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 141,
            "description": "Checks if map is set to follow user.",
            "itemtype": "method",
            "name": "getFollow",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 150,
            "description": "Sets map to follow / unfollow user",
            "itemtype": "method",
            "name": "setFollow",
            "params": [
                {
                    "name": "f",
                    "description": "Set to true to follow user",
                    "type": "Boolean"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 159,
            "description": "Sets the map.",
            "itemtype": "method",
            "name": "setMap",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "google.maps.Map"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 168,
            "description": "Sets the user location.",
            "itemtype": "method",
            "name": "setUserLocation",
            "params": [
                {
                    "name": "u",
                    "description": "",
                    "type": "google.maps.LatLng"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 177,
            "description": "GET locations from database within the map's bounds.",
            "itemtype": "method",
            "name": "getLocationsInBound",
            "params": [
                {
                    "name": "uid",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "success",
                    "description": "",
                    "type": "Callback"
                },
                {
                    "name": "fail",
                    "description": "",
                    "type": "Callback"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 196,
            "description": "GET all locations from database within the map's bounds.",
            "itemtype": "method",
            "name": "getAllLocationsInBound",
            "params": [
                {
                    "name": "success",
                    "description": "",
                    "type": "Callback"
                },
                {
                    "name": "fail",
                    "description": "",
                    "type": "Callback"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 207,
            "description": "POST given location to the RESTful api.\nData must have the following form:\n  { loc: { lat: lat, lng: lng }, uid: uid }",
            "itemtype": "method",
            "name": "postUserLocation",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Location"
                },
                {
                    "name": "success",
                    "description": "",
                    "type": "Callback"
                },
                {
                    "name": "fail",
                    "description": "",
                    "type": "Callback"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 222,
            "description": "Sets the user marker.",
            "itemtype": "method",
            "name": "setUserMarker",
            "params": [
                {
                    "name": "u",
                    "description": "",
                    "type": "google.maps.Marker"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 231,
            "description": "Conventing the google object to latitude and longitude.",
            "itemtype": "method",
            "name": "setUserMarker",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Position"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 241,
            "description": "Gets the user location.",
            "itemtype": "method",
            "name": "getLocation",
            "params": [
                {
                    "name": "pass",
                    "description": "",
                    "type": "google.maps.LatLng"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 259,
            "description": "Gets the bound object from the map.",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "",
                "type": "google.maps.LatLngBounds"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 268,
            "description": "Pans the map to the user current location.",
            "itemtype": "method",
            "name": "panToUserLoc",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 279,
            "description": "Moves the user marker on the map.",
            "itemtype": "method",
            "name": "moveUserMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 291,
            "description": "Get the geographical bounds of a map",
            "itemtype": "method",
            "name": "geoBounds",
            "return": {
                "description": "Returns to corners (NE, NW) of a map\n  and the width ahd height.",
                "type": "Object"
            },
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 314,
            "description": "Updates the user location.",
            "itemtype": "method",
            "name": "updateLocation",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Position"
                }
            ],
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 341,
            "description": "Updates the fog by querying the database than reloading the fog.",
            "itemtype": "method",
            "name": "updateFog",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 381,
            "description": "Reloads the fog without querying the database.",
            "itemtype": "method",
            "name": "reloadFog",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 389,
            "description": "Callback to update the fog after a user moves.",
            "itemtype": "method",
            "name": "updateFogAfterMove",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 401,
            "description": "Sets events for the map module.",
            "itemtype": "method",
            "name": "setEvents",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 421,
            "description": "Add a map event.",
            "itemtype": "method",
            "name": "addEvent()",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 429,
            "description": "Sets the width and height of the map.",
            "itemtype": "method",
            "name": "reDim",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 438,
            "description": "Places the user marker on the map.",
            "itemtype": "method",
            "name": "placeUserMarker",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 454,
            "description": "Initializes the map",
            "itemtype": "method",
            "name": "initializeMap",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 475,
            "description": "Initializes the map module.",
            "itemtype": "method",
            "name": "init",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/map.js",
            "line": 494,
            "description": "Sets the glopal name space",
            "type": "{attribute}",
            "class": "map",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 15,
            "description": "Object that is returned by \nnavigator.geolocation.getCurrentPosition()",
            "access": "private",
            "tagname": "position",
            "type": "Geolocation",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 31,
            "description": "Gets position.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "position"
            },
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 40,
            "description": "Sets position.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Geolocation"
                }
            ],
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 49,
            "description": "Takes a Geolocation object and parses\nit to update position.",
            "itemtype": "method",
            "name": "setCurrentPosition",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Geolocation"
                }
            ],
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 132,
            "description": "Sets initial position to the user's\nactual position.",
            "itemtype": "method",
            "name": "init",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/navigator.js",
            "line": 143,
            "description": "Indicates wether the module uses mock coords.",
            "itemtype": "property",
            "name": "mock",
            "type": "boolean",
            "default": "true",
            "class": "navigator",
            "module": "fogger"
        },
        {
            "file": "static/js/share.js",
            "line": 1,
            "description": "Created and copyrighted by Massimo Di Pierro <massimo.dipierro@gmail.com>\n   (MIT license)  \nExample:\n<script src=\"share.js\"></script>",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": ".grunt/grunt-contrib-jasmine/boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 1,
            "description": "Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 13,
            "description": "## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 20,
            "description": "Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 25,
            "description": "Create the Jasmine environment. This is used to run all specs in a project.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 30,
            "description": "## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 77,
            "description": "Add all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 86,
            "description": "Expose the interface for adding custom equality testers.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 93,
            "description": "Expose the interface for adding custom expectation matchers",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 100,
            "description": "Expose the mock interface for the JavaScript timeout functions",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 107,
            "description": "## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 120,
            "description": "## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 133,
            "description": "The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 139,
            "description": "Filter which specs will be run by matching the start of the full name against the `spec` query param.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 150,
            "description": "Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 158,
            "description": "## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/lib/jasmine-2.0.0/boot.js",
            "line": 173,
            "description": "Helper function for readability above.",
            "class": "MapSpec",
            "module": "fogger"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 8,
            "description": "Test the import of modules",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 39,
            "description": "Menu Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 59,
            "description": "Interface Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 95,
            "description": "Restful API Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 195,
            "description": "Graphics Module Tests",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 208,
            "description": "Mock navigator module test",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "static/jasmine/spec/default/mapSpec.js",
            "line": 308,
            "description": "Map module test",
            "class": "MapSpec",
            "module": "test"
        },
        {
            "file": "Gruntfile.js",
            "line": 21,
            "description": "Reads the package.json file.",
            "itemtype": "property",
            "name": "pkg",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 27,
            "description": "Generates documentation for javascript source code,\ntest code and grunt file",
            "itemtype": "property",
            "name": "yuidoc",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 44,
            "description": "Attempts to run jasmine tests, but requires a headless\nenvironment.",
            "itemtype": "property",
            "name": "jasmine",
            "class": "GruntConfiguration",
            "module": "Grunt"
        },
        {
            "file": "Gruntfile.js",
            "line": 59,
            "description": "Removes the docs folder and everything else generate by\nthis Gruntfile.",
            "itemtype": "property",
            "name": "clean",
            "class": "GruntConfiguration",
            "module": "Grunt"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nDD_belatedPNG: Adds IE6 support: PNG images for CSS background-image and HTML <IMG/>.\nAuthor: Drew Diller\nEmail: drew.diller@gmail.com\nURL: http://www.dillerdesign.com/experiment/DD_belatedPNG/\nVersion: 0.0.8a\nLicensed under the MIT License: http://dillerdesign.com/experiment/DD_belatedPNG/#license\n\nExample usage:\nDD_belatedPNG.fix('.png_bg'); // argument is a CSS selector\nDD_belatedPNG.fixPng( someNode ); // argument is an HTMLDomElement",
            "line": " static/js/dd_belatedpng.js:1"
        },
        {
            "message": "Missing item type",
            "line": " static/js/distance.js:17"
        },
        {
            "message": "Missing item type\nMask Canvas",
            "line": " static/js/graphics.js:7"
        },
        {
            "message": "Missing item type\nCanvas context",
            "line": " static/js/graphics.js:13"
        },
        {
            "message": "Missing item type\nCircle Radius",
            "line": " static/js/graphics.js:18"
        },
        {
            "message": "Missing item type\nRelative Radius Size",
            "line": " static/js/graphics.js:24"
        },
        {
            "message": "Missing item type\nCanvas height",
            "line": " static/js/graphics.js:29"
        },
        {
            "message": "Missing item type\nCanvas width",
            "line": " static/js/graphics.js:35"
        },
        {
            "message": "Missing item type\nGet the context of the canvas.",
            "line": " static/js/graphics.js:42"
        },
        {
            "message": "Missing item type\nGets the scale factor of the map, \nthis basically corresponds to the\nwidth of the canvas, in meters.",
            "line": " static/js/graphics.js:50"
        },
        {
            "message": "Missing item type\nGet the bounds of map in delta geolocation format.",
            "line": " static/js/graphics.js:81"
        },
        {
            "message": "Missing item type\nGet the canvas frame in width/height format.",
            "line": " static/js/graphics.js:93"
        },
        {
            "message": "Missing item type\nAdd circles to the canvas for a location on the map.",
            "line": " static/js/graphics.js:161"
        },
        {
            "message": "Missing item type\nAdd a canvas to the HTML layout.",
            "line": " static/js/graphics.js:176"
        },
        {
            "message": "Missing item type\nResets the canvas mask.",
            "line": " static/js/graphics.js:189"
        },
        {
            "message": "Missing item type\nInitializes the module",
            "line": " static/js/graphics.js:196"
        },
        {
            "message": "Missing item type\nModule global namespace",
            "line": " static/js/graphics.js:219"
        },
        {
            "message": "Missing item type\nWidth of the interaction layer",
            "line": " static/js/interact.js:23"
        },
        {
            "message": "Missing item type\nHeight of the interaction layer",
            "line": " static/js/interact.js:28"
        },
        {
            "message": "Missing item type\nReference to the layer.",
            "line": " static/js/interact.js:33"
        },
        {
            "message": "Missing item type\nGenerates a Map Marker.",
            "line": " static/js/interact.js:40"
        },
        {
            "message": "Missing item type\nGenerates the user's marker",
            "line": " static/js/interact.js:61"
        },
        {
            "message": "Missing item type\nSets the glopal name space",
            "line": " static/js/interact.js:221"
        },
        {
            "message": "Missing item type",
            "line": " static/js/map.js:20"
        },
        {
            "message": "Missing item type\nObject that is returned by\nnavigator.geolocation.getCurrentPosition()",
            "line": " static/js/map.js:26"
        },
        {
            "message": "Missing item type",
            "line": " static/js/map.js:33"
        },
        {
            "message": "Missing item type\nArray of user locations.",
            "line": " static/js/map.js:37"
        },
        {
            "message": "Missing item type\nArray of other users' locations.",
            "line": " static/js/map.js:42"
        },
        {
            "message": "Missing item type\nTimeout to delay map reload.",
            "line": " static/js/map.js:47"
        },
        {
            "message": "Missing item type\nMap viewing mode (user or world).",
            "line": " static/js/map.js:52"
        },
        {
            "message": "Missing item type\nMap viewing type (satellite or roadmap)",
            "line": " static/js/map.js:57"
        },
        {
            "message": "Missing item type\nSet the map to follow the user.",
            "line": " static/js/map.js:62"
        },
        {
            "message": "Missing item type\nSets the glopal name space",
            "line": " static/js/map.js:494"
        },
        {
            "message": "Missing item type\nObject that is returned by \nnavigator.geolocation.getCurrentPosition()",
            "line": " static/js/navigator.js:15"
        },
        {
            "message": "Missing item type\nCreated and copyrighted by Massimo Di Pierro <massimo.dipierro@gmail.com>\n   (MIT license)  \nExample:\n<script src=\"share.js\"></script>",
            "line": " static/js/share.js:1"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " .grunt/grunt-contrib-jasmine/boot.js:173"
        },
        {
            "message": "Missing item type\nStarting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\nIf a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\nThe location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n[jasmine-gem]: http://github.com/pivotal/jasmine-gem",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:1"
        },
        {
            "message": "Missing item type\n## Require &amp; Instantiate\n\nRequire Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:13"
        },
        {
            "message": "Missing item type\nSince this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:20"
        },
        {
            "message": "Missing item type\nCreate the Jasmine environment. This is used to run all specs in a project.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:25"
        },
        {
            "message": "Missing item type\n## The Global Interface\n\nBuild up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:30"
        },
        {
            "message": "Missing item type\nAdd all of the Jasmine global/public interface to the proper global, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:77"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom equality testers.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:86"
        },
        {
            "message": "Missing item type\nExpose the interface for adding custom expectation matchers",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:93"
        },
        {
            "message": "Missing item type\nExpose the mock interface for the JavaScript timeout functions",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:100"
        },
        {
            "message": "Missing item type\n## Runner Parameters\n\nMore browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:107"
        },
        {
            "message": "Missing item type\n## Reporters\nThe `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:120"
        },
        {
            "message": "Missing item type\nThe `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:133"
        },
        {
            "message": "Missing item type\nFilter which specs will be run by matching the start of the full name against the `spec` query param.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:139"
        },
        {
            "message": "Missing item type\nSetting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:150"
        },
        {
            "message": "Missing item type\n## Execution\n\nReplace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:158"
        },
        {
            "message": "Missing item type\nHelper function for readability above.",
            "line": " static/jasmine/lib/jasmine-2.0.0/boot.js:173"
        },
        {
            "message": "Missing item type\nTest the import of modules",
            "line": " static/jasmine/spec/default/mapSpec.js:8"
        },
        {
            "message": "Missing item type\nMenu Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:39"
        },
        {
            "message": "Missing item type\nInterface Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:59"
        },
        {
            "message": "Missing item type\nRestful API Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:95"
        },
        {
            "message": "Missing item type\nGraphics Module Tests",
            "line": " static/jasmine/spec/default/mapSpec.js:195"
        },
        {
            "message": "Missing item type\nMock navigator module test",
            "line": " static/jasmine/spec/default/mapSpec.js:208"
        },
        {
            "message": "Missing item type\nMap module test",
            "line": " static/jasmine/spec/default/mapSpec.js:308"
        }
    ]
}